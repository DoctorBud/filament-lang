{

RED << [1,0,0]
GREEN << [0,1,0]
BLUE << [0,0,1]

w << 10
h << 10

spheres << [
//    [[-1,0,-1],0.25,   RED],
    [[0,0,-1], 0.5,   BLUE]
    //[[1,0,-1], 0.25, GREEN]
]

dot << (A,B) -> {
  sum(A*B)
}

intersect << (obj, ray) -> {
//  print("intersecting")
//  print(obj)
//  print("with")
//  print(ray)
  sorigin << (ray[0])
//  print("origin") print(sorigin)
  cen << obj[0]
//  print("center")  print(cen)
  oc << (sorigin - obj[0])
//  print("oc") print(oc)

  dir << (ray[1])
//  print("dir") print(dir)

  a << (dot(dir,dir))
//  print("a") print(a)

  b << (2.0 * dot(oc,dir))
//  print("b") print(b)

  rad << (obj[1])
//  print("rad") print(rad)
  c << (dot(oc,oc) - (rad*rad))
//  print("c") print(c)

  discr << ((b*b) - (4*a*c))
//  print("discr") print(discr)
  dist << (if (discr < 0) then {
     -1
  } else {
     (sqrt(discr)*(-1)-b)/(2.0*a)
  })
//  print("dist") print(dist)
  dist
}

trace << (x,y) -> {
    print("tracing") print(x) print(y)
    u << (x/w)
    v << (y/h)
    ray << [ [0,0,0], [(u*4)-2, 1-(v*2), -1]]
    spheres
      >> map(with: (obj) -> intersect(obj,ray))
//      >> sort(by:"distance")
      >> hits
      print(hits[0])
      if(hits[0] > 0) then { BLUE }  else { RED }
}

make_image(width:w, height:h) >> map_image(with:trace)
//trace(1,1)

}

